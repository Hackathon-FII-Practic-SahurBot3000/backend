# The Power of COLLECTIVE Imagination — App Summary

An innovative platform that organizes recurring thematic hackathons spanning multiple creative fields: writing, art (image, video), music, and business challenges. 

## Core Concept
- Users pay a small entry fee (1 euro) to participate or there are free hackathons.
- The total prize pool is the sum of all entry fees minus a platform commission.
- Winners take the entire prize pool.
- Hackathon themes are either AI-generated or submitted by business sponsors.
- Voting is community-driven, possibly supplemented by judges or AI originality checks.

## Features
- Multiple hackathon areas with a Hall of Fame showcasing winners and their achievements.
- User profiles with social media links (Dribbble, Instagram, Behance) and a participation gallery.
- Voting system implemented via Tinder-style swipe cards (right swipe = vote, left swipe = skip).
- Entries can be individual or team-based.
- Optional user-generated summaries of their submissions, with AI-assisted summarization for text entries.
- Prizes include monetary rewards from entries plus sponsored prizes.
- Voting is optional; users can choose whether to vote.
- Votes can be cast by participants, jurors, and AI for originality verification.


You are an expert in Java programming, Spring Boot, Spring Framework, Maven, JUnit, and related Java technologies.

Code Style and Structure
- Write clean, efficient, and well-documented Java code with accurate Spring Boot examples.
- Use Lombok to erase boiler-plate code
- Use Spring Boot best practices and conventions throughout your code.
- Implement RESTful API design patterns when creating web services.
- Use descriptive method and variable names following camelCase convention.
- Structure Spring Boot applications: controllers, services, repositories, models, configurations.
- Create DAO and DTO objects to communicate with the database and the frontend

Spring Boot Specifics
- Use Spring Boot starters for quick project setup and dependency management.
- Implement proper use of annotations (e.g., @SpringBootApplication, @RestController, @Service, @Beans).
- Utilize Spring Boot's auto-configuration features effectively.
- Implement proper exception handling using @ControllerAdvice and @ExceptionHandler.

Naming Conventions
- Use PascalCase for class names (e.g., UserController, OrderService).
- Use camelCase for method and variable names (e.g., findUserById, isOrderValid).
- Use ALL_CAPS for constants (e.g., MAX_RETRY_ATTEMPTS, DEFAULT_PAGE_SIZE).

Java and Spring Boot Usage
- Use Java 21 or later features when applicable (e.g., records, sealed classes, pattern matching).
- Leverage Spring Boot 3.x features and best practices.
- Use Spring Data JPA for database operations when applicable.
- Implement proper validation using Bean Validation (e.g., @Valid, custom validators).

Configuration and Properties
- Use application.properties or application.yml for configuration.
- Implement environment-specific configurations using Spring Profiles.
- Use @ConfigurationProperties for type-safe configuration properties.

Dependency Injection and IoC
- Use constructor injection over field injection for better testability.
- Leverage Spring's IoC container for managing bean lifecycles.

Performance and Scalability
- Implement caching strategies using Spring Cache abstraction.
- Use async processing with @Async for non-blocking operations.
- Implement proper database indexing and query optimization.

Security
- Implement Spring Security for authentication and authorization.
- Use proper password encoding (e.g., jwt, google authentication).
- Implement CORS configuration when necessary.

API Documentation
- Use Springdoc OpenAPI (formerly Swagger) for API documentation.

Data Access and ORM
- Use Spring Data JPA for database operations.
- Implement proper entity relationships and cascading.

Build and Deployment
- Use Maven for dependency management and build processes.

Follow best practices for:
- RESTful API design (proper use of HTTP methods, status codes, etc.).
- Microservices architecture (if applicable).
- Asynchronous processing using Spring's @Async or reactive programming with Spring WebFlux.

Adhere to SOLID principles and maintain high cohesion and low coupling in your Spring Boot application design.

This is our database:
---

## Integrated Domain Model (DB Schema)

The following entity-relationship model must be respected in backend logic and implemented with Spring Data JPA.

### Entities

#### `User`
- `id`: Primary Key
- `email`, `first_name`, `last_name`, `password`: used for authentication and personalization
- `profile_picture_url`, `google_account`: used for social login / display
- **Relations**:
  - One-to-many: `uploads`, `links`, `submissions`
  - Many-to-many via `team_participants`

#### `Hackathon`
- `id`, `name`, `type`, `description`, `started_at`, `ended_at`, `hackathon_state`
- Enum for `hackathon_state` (e.g., UPCOMING, OPEN, ENDED)
- **Relations**:
  - One-to-many with `hackathon_teams`
  - One-to-many with `teams` (by extension via `hackathon_teams`)

#### `Team`
- `id`, `name`
- **Relations**:
  - Many-to-one: created within a hackathon
  - Many-to-many: participants via `team_participants`

#### `HackathonTeam`
- Represents a submission by a team in a hackathon
- Fields: `hackathon_id`, `team_name`, `url_submission`
- **Relations**:
  - Many votes reference this entity

#### `TeamParticipants`
- Join table between `users` and `teams`
- Used to resolve team membership
- `team_id`, `user_id`

#### `Submissions`
- Represents individual user submissions (as opposed to teams)
- `upload_id` references actual media
- `user_id` indicates owner

#### `Uploads`
- Contains file URL uploaded by a user
- `user_id`, `url`

#### `Links`
- External profile/social links (e.g., Dribbble, Instagram)
- `platform_name`, `url`, `user_id`

#### `Votes`
- Voting system where a team votes on another team’s submission
- `voter_team_id`, `voted_team_id`

---