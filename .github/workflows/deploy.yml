name: Build, Push & Deploy on Release

on:
  release:
    types: [published]

env:
  IMAGE_NAME: ghcr.io/hackathon-fii-practic-sahurbot3000/backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract release tag
      id: release_tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        build-args: |
          SPRING_PROFILES_ACTIVE=prod
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        tags: |
          ${{ env.IMAGE_NAME }}:${{ steps.release_tag.outputs.tag }}
          ${{ env.IMAGE_NAME }}:latest
        # cache-from: type=gha
        # cache-to: type=gha,mode=max

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker pull ${{ env.IMAGE_NAME }}:${{ steps.release_tag.outputs.tag }}
          docker stop backend || true
          docker rm backend || true
          echo "Starting container..."
          docker run -d \
            --name backend \
            --restart unless-stopped \
            -p 8080:8080 \
            ${{ env.IMAGE_NAME }}:${{ steps.release_tag.outputs.tag }}
          echo "Container started. Checking logs..."
          sleep 10
          docker logs backend --tail=50
