name: Build, Push & Deploy on Release

on:
  push:
    branches:
      - feature/fix-google-auth

env:
  IMAGE_NAME: ghcr.io/hackathon-fii-practic-sahurbot3000/backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker pull ${{ env.IMAGE_NAME }}:latest
          
          # Create network if it doesn't exist
          docker network create hackathon-network || true
          
          # Stop and remove existing backend container
          docker stop backend || true
          docker rm backend || true
          
          # Run backend container connected to the same network as postgres
          docker run -d \
            --name backend \
            --network hackathon-network \
            -e DB_URL="jdbc:postgresql://postgres:5432/hackathon-fiipractic" \
            -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            -e FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
            -e SPRING_PROFILES_ACTIVE=prod \
            -p 8080:8080 \
            ${{ env.IMAGE_NAME }}:latest